from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

# Sample data (item, description)
data = [
    ('Product1', 'Great product with advanced features'),
    ('Product2', 'Affordable and reliable option for everyday use'),
    ('Product3', 'High-performance product designed for professionals'),
    ('Product4', 'Sleek design and cutting-edge technology'),
]

# Create a DataFrame from the data
import pandas as pd
df = pd.DataFrame(data, columns=['item', 'description'])

# Create TF-IDF vectorizer
tfidf_vectorizer = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf_vectorizer.fit_transform(df['description'])

# Compute cosine similarity between items
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

# Function to get recommendations for a given item
def get_recommendations(item, cosine_sim=cosine_sim):
    idx = df[df['item'] == item].index[0]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:4]  # Get top 3 similar items
    item_indices = [i[0] for i in sim_scores]
    return df['item'].iloc[item_indices].tolist()

# Example: Get recommendations for 'Product1'
recommendations = get_recommendations('Product1')
print(f"Recommended products for Product1: {recommendations}")